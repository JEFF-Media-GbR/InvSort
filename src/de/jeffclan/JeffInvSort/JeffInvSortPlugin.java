package de.jeffclan.JeffInvSort;

import java.io.File;
import java.io.IOException;

import org.bukkit.Bukkit;
import org.bukkit.configuration.InvalidConfigurationException;
import org.bukkit.entity.Player;
import org.bukkit.plugin.java.JavaPlugin;

import de.jeffclan.JeffChestSort.JeffChestSortPlugin;
import de.jeffclan.JeffChestSort.Metrics;

public class JeffInvSortPlugin extends JavaPlugin {
	
	// ChestSort API
	JeffChestSortPlugin chestSort;
	
	int currentConfigVersion = 1;
	boolean usingMatchingConfig = true;
	JeffInvSortUpdateChecker updateChecker;
	JeffInvSortMessages messages;
	
	private long updateCheckInterval = 86400; // in seconds. We check on startup and every 24 hours (if you never restart your server)
	
	// player inventory slots. First one is 9, last one is 36
	int startSlot=9;
	int endSlot=36;

	void createConfig() {
		this.saveDefaultConfig();

		// Config version prior to 1? Then it must have been generated by InvSort 0.x
		if (getConfig().getInt("config-version", 0) < 1) {
			getLogger().warning("========================================================");
			getLogger().warning("You are using a config file that has been generated");
			getLogger().warning("prior to InvSort version 1.0.0.");
			getLogger().warning("To allow everyone to use the new features, your config");
			getLogger().warning("has been renamed to config.old.yml and a new one has");
			getLogger().warning("been generated. Please examine the new config file to");
			getLogger().warning("see the new possibilities and adjust your settings.");
			getLogger().warning("========================================================");

			File configFile = new File(getDataFolder().getAbsolutePath() + File.separator + "config.yml");
			File oldConfigFile = new File(getDataFolder().getAbsolutePath() + File.separator + "config.old.yml");
			if (oldConfigFile.getAbsoluteFile().exists()) {
				oldConfigFile.getAbsoluteFile().delete();
			}
			configFile.getAbsoluteFile().renameTo(oldConfigFile.getAbsoluteFile());
			saveDefaultConfig();
			try {
				getConfig().load(configFile.getAbsoluteFile());
			} catch (IOException | InvalidConfigurationException e) {
				getLogger().warning("Could not load freshly generated config file!");
				e.printStackTrace();
			}
		} else if (getConfig().getInt("config-version", 0) != currentConfigVersion) {
			getLogger().warning("========================================================");
			getLogger().warning("YOU ARE USING AN OLD CONFIG FILE!");
			getLogger().warning("This is not a problem, as InvSort will just use the");
			getLogger().warning("default settings for unset values. However, if you want");
			getLogger().warning("to configure the new options, please go to");
			getLogger().warning("<missing download link>");
			getLogger().warning("and replace your config.yml with the new one. You can");
			getLogger().warning("then insert your old changes into the new file.");
			getLogger().warning("========================================================");
			usingMatchingConfig = false;
		}


		getConfig().addDefault("check-for-updates", "true");
	}
	
	public void sortPlayerInventory(Player player) {
		chestSort.sortInventory(player.getInventory(), startSlot, endSlot);
	}
	
	@Override
	public void onEnable() {
		
		createConfig();
		
		updateChecker = new JeffInvSortUpdateChecker(this);
		messages = new JeffInvSortMessages(this);
		
		// We need an instance of JeffChestSortPlugin to use ChestSorts sorting algorithm 
		chestSort = (JeffChestSortPlugin) getServer().getPluginManager().getPlugin("ChestSort");
		
		if(chestSort==null || !(chestSort instanceof JeffChestSortPlugin)) {
			getLogger().warning("************** ChestSort plugin not found. **************");
			getLogger().warning("https://www.spigotmc.org/resources/1-13-chestsort.59773/");
			getLogger().warning("You MUST install ChestSort to use InvSort. Disabling...");
			getServer().getPluginManager().disablePlugin(this);
		} else {
			getLogger().info("Hooked into ChestSort succesfully. Happy sorting :)");
		}
		
		if (getConfig().getString("check-for-updates", "true").equalsIgnoreCase("true")) {
			Bukkit.getScheduler().scheduleSyncRepeatingTask(this, new Runnable() {
				public void run() {
					updateChecker.checkForUpdate();
				}
			}, 0L, updateCheckInterval * 20);
		} else if (getConfig().getString("check-for-updates", "true").equalsIgnoreCase("on-startup")) {
			updateChecker.checkForUpdate();
		}
		
		Metrics metrics = new Metrics(this);
		
		
		
		// Register the CommandExecutor
		this.getCommand("invsort").setExecutor(new JeffInvSortCommandExecutor(this));
		
		// Register the EventListener
		//this.getServer().getPluginManager().registerEvents(new JeffInvSortListener(this), this);
	}
	
	

}
